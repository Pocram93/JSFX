desc:Pocram Single Octave MIDI Keyboard
About:
  # About
  TODO describe me pls!!!1
Link: https://github.com/Pocram93/JSFX
Version: 0.1
Author: Marco Picker
Changelog:
  Initial release.

slider1:note_1_key_code=49<-1,255,1>Note 1 Key Code
slider2:note_1_sharp_key_code=-1<-1,255,1>Note 1# Key Code
slider3:note_2_key_code=50<-1,255,1>Note 2 Key Code
slider4:note_2_sharp_key_code=-1<-1,255,1>Note 2# Key Code
slider5:note_3_key_code=51<-1,255,1>Note 3 Key Code
slider6:note_4_key_code=52<-1,255,1>Note 4 Key Code
slider7:note_4_sharp_key_code=-1<-1,255,1>Note 4# Key Code
slider8:note_5_key_code=53<-1,255,1>Note 5 Key Code
slider9:note_5_sharp_key_code=-1<-1,255,1>Note 5# Key Code
slider10:note_6_key_code=54<-1,255,1>Note 6 Key Code
slider11:note_6_sharp_key_code=-1<-1,255,1>Note 6# Key Code
slider12:note_7_key_code=55<-1,255,1>Note 7 Key Code
slider13:note_8_key_code=56<-1,255,1>Note 8 Key Code

slider14:octave_down_key_code=57<-1,255,1>Octave Down Key Code
slider15:octave_up_key_code=48<-1,255,1>Octave Up Key Code

slider17:current_octave_index=0<-5,5,1>Curent Octave

slider100:DEBUG_last_key=-1<-1,255,1>Last Pressed Key

@init
octave_offset = 0;

octave_down_slider_id = 14;
octave_up_slider_id = 15;

// Midi event enum
midi_event_note_on = $x90;
midi_event_note_off = $x80;

// Key state enum
key_state_pressed = 3;
key_state_held = 2;
key_state_lifted = 1;
key_state_not_pressed = 0;

note_map = 15;
note_map[1] = 60;
note_map[2] = 61;
note_map[3] = 62;
note_map[4] = 63;
note_map[5] = 64;
note_map[6] = 65;
note_map[7] = 66;
note_map[8] = 67;
note_map[9] = 68;
note_map[10] = 69;
note_map[11] = 70;
note_map[12] = 71;
note_map[13] = 72;

key_states_array;


@block
// ------------------ FUNCTIONS ------------------ \\
function update_current_octave()
(
    previous_index = current_octave_index;

    key_states_array[octave_up_slider_id] == key_state_pressed ? 
    (
        current_octave_index = current_octave_index + 1;
        key_states_array[octave_up_slider_id] = key_state_lifted;
    );

    key_states_array[octave_down_slider_id] == key_state_pressed ? 
    (
        current_octave_index = current_octave_index - 1;
        key_states_array[octave_down_slider_id] = key_state_lifted;
    );

    octave_offset = 12 * current_octave_index;

    current_octave_index != previous_index;
);

function send_note_events()
(
    i = 1;
    loop(13,
        note_number = note_map[i] + octave_offset;

        // Key pressed
        key_states_array[i] == key_state_pressed ?
        (
            midisend(0, midi_event_note_on, note_number, 127);
            key_states_array[i] = key_state_held;
        );

        key_states_array[i] == key_state_lifted ?
        (
            midisend(0, midi_event_note_off, note_number, 127);
            key_states_array[i] = key_state_not_pressed;
        );

        i = i + 1;
    );
);

function send_midi_off_for_octave(octave)
(
    i = 1;
    loop(13,
        note_number = note_map[i] + octave * 12;

        // Is key bound?
        slider(i) > 0 ?
        (
            midisend(0, midi_event_note_off, note_number, 127);
        );

        i = i + 1;
    );
);

// ------------------ LOGIC ------------------ \\
previous_octave = current_octave_index;
octave_changed = update_current_octave();
octave_changed ? send_midi_off_for_octave(previous_octave);

send_note_events();

@gfx
// ------------------ STATICS ------------------ \\
function update_key_states()
(
    note_i = 1;
    loop(15,
        slider(note_i) > 0 ?
        (
            is_key_down = gfx_getchar(slider(note_i));
            previous_state = key_states_array[note_i];
            
            // Key down
            // Keys can only be pressed when they are not currently being pressed!
            is_key_down && previous_state == key_state_not_pressed ? 
            (
                key_states_array[note_i] = key_state_pressed;
            );

            // Key lifted
            is_key_down < 1 && (previous_state == key_state_pressed || previous_state == key_state_held) ? 
            (
                key_states_array[note_i] = key_state_lifted;
            );

            // Key not pressed
            is_key_down < 1 && (previous_state == key_state_lifted) ? 
            (
                key_states_array[note_i] = key_state_not_pressed;
            );
        );
    
        note_i = note_i + 1;
    );
);

// ----------------- RENDERING------------------ \\
gfx_clear = 0;

update_key_states();

char = gfx_getchar();
char > 0 ? DEBUG_last_key = char;
